% -*- erlang -*-

handle_chanevent({joined, Chan, Topic, Users}, #state{was_kicked = true, kicked_by = Kicker} = State) ->
	cmd({chanmsg, [suicide_greeting(State, Kicker)]}, State),
	become_op(State),
	State#state{was_kicked = false};

handle_chanevent({kicked, Chan, User, _Reason}, State) ->
	cmd({join, Chan}, State),
	State#state{was_kicked = true, kicked_by = User};

parse_cmd(State, User, ["stat"]) ->
	show_stat(State, User#user.ident);

parse_privcmd(State, User, ["stat"]) ->
	show_stat(State, User#user.ident);

parse_privcmd(State, User, ["hist"]) ->
	show_history(State, User);

show_help(State) ->	
	cmd({me, ["-- ахуенно полезный и функциональный бот."]}, State),
	cmd({me, ["умеет:"]}, State),
	cmd({chanmsg, ["Команды канала:"]}, State),
	print_long_results(State, ?CHANCMDLIST),
	cmd({chanmsg, ["Приватные команды:"]}, State),
	print_long_results(State, ?PRIVCMDLIST),
	cmd({me, ["няшка =^_^="]}, State).

stat_line(#userstat{ident = Ident, line_count = LineCount, sym_count = SymCount}) ->
	lists:flatten(io_lib:format(" ~-15s | ~6B | ~8B", [Ident, LineCount, SymCount])).

show_stat_line(State, Stat = #userstat{ident = OwnIdent}, OwnIdent) ->
	cmd({chanmsg, [stat_line(Stat) ++ " <=== YOU"]}, State);
show_stat_line(State, Stat, _) ->
	cmd({chanmsg, [stat_line(Stat)]}, State).

show_stat(State, OwnIdent) ->
	{atomic, Stats} = mnesia:sync_transaction(fun () -> show_stat_txn() end),
	cmd({chanmsg, [" *********** User Stats ************"]}, State),
	cmd({chanmsg, [" Ident           |  Lines |  Symbols"]}, State),
	cmd({chanmsg, [" -----------------------------------"]}, State),
	lists:foreach(fun (X) -> show_stat_line(State, X, OwnIdent), timer:sleep(?MSG_MIN_DELAY) end, Stats),
	cmd({chanmsg, [" ***********************************"]}, State).

show_stat_txn() ->
	qlc:eval(qlc:sort(qlc:q([X || X <- mnesia:table(userstat)]), {order, fun (U1, U2) -> U1#userstat.line_count > U2#userstat.line_count end})).

show_history(State, User) ->
	H = list_history(State#state.history, User#user.ident, []),
	HL = lists:filter(fun (X) -> length(X) > 0 end, H),
	privmsg_long_results(State, User#user.nick, HL),
	cmd({privmsg, [User#user.nick, "---------------------------"]}, State).

list_history([{_, quit, [#user{ident = MyIdent}, _]} | _] = H, Ident, Hist) when MyIdent == Ident ->
	list_history_tail(lists:sublist(H, ?HIST_TAIL), Hist);
list_history([{_, part, [#user{ident = MyIdent}, _]} | _] = H, Ident, Hist) when MyIdent == Ident ->
	list_history_tail(lists:sublist(H, ?HIST_TAIL), Hist);
list_history([HistEnt | Tail], Ident, Hist) ->
	io:format("Adding histent: ~s~n", [histent_to_list(HistEnt)]),
	list_history(Tail, Ident, [histent_to_list(HistEnt) | Hist]);
list_history([], _, Hist) ->
	Hist.

list_history_tail([HistEnt | Tail], Hist) ->
	io:format("Adding histent: ~s~n", [histent_to_list(HistEnt)]),
	list_history_tail(Tail, [histent_to_list(HistEnt) | Hist]);
list_history_tail([], Hist) ->
	Hist.

histent_to_list({Time, Event, Params}) ->
	{_, {HH, MM, _SS}} = Time,
	case histent_to_list({Event, Params}) of
		[] ->
			[];
		X ->
			"[" ++ integer_to_list(HH) ++ ":" ++ integer_to_list(MM) ++ "] " ++ X
	end;

histent_to_list({chanmsg, [User, Msg]}) ->
	User#user.nick ++ ": " ++ Msg;
histent_to_list({me, [User, Msg]}) ->
	"* " ++ User#user.nick ++ " " ++ Msg;
histent_to_list({nick, [User, Nick]}) ->
	User#user.nick ++ " -> " ++ Nick;	
histent_to_list({topic, [User, Topic]}) ->
	User#user.nick ++ " TOPIC: " ++ Topic;
histent_to_list({join, [User]}) ->
	"===> " ++ User#user.nick;
histent_to_list({quit, [User, Reason]}) ->
	"<=== " ++ User#user.nick ++ " ("  ++ Reason ++ ")";
histent_to_list({part, [User, Reason]}) ->
	"<=== " ++ User#user.nick ++ " ("  ++ Reason ++ ")";
histent_to_list({kick, [Kicker, Nick, Reason]}) ->
	Kicker#user.nick ++ " KICK " ++ Nick ++ " ("  ++ Reason ++ ")";
histent_to_list(_) ->
	[].

suicide_greeting(State, Kicker) when State#state.nick == Kicker -> 
	suicide_self_greeting(State, random_p:uniform());
suicide_greeting(_, Kicker) -> ["Ты мудак, " ++ Kicker].

update_stat(User, Msg) ->
	mnesia:sync_transaction(fun () -> update_stat_txn(User, Msg) end).

update_stat_txn(#user{ident = Ident}, Msg) ->
	case mnesia:read({userstat, Ident}) of
		[] ->
			io:format("New stat~n"),
			ok = mnesia:write(#userstat{ident = Ident, sym_count = length(Msg)});
		[Stat] ->
			io:format("Update stat~n"),
			ok = mnesia:write(Stat#userstat{line_count = Stat#userstat.line_count + 1,
											sym_count = Stat#userstat.sym_count + length(Msg)});
		Any ->
			io:format("WARN: ~p", [Any])
	end.
